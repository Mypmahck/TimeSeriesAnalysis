package cn.InstFS.wkr.NetworkMining.Miner.Common;

public class KSTestTable {
	private int n; //数据点个数
	private double alpha; //1-置信度,显著性水平
	private double D_na;
	public KSTestTable(int n,double alpha){
		this.n = n;
		this.alpha = alpha;
		D_na = checkTable(n, alpha);
	}
	public double checkTable(int n,double alpha){
		double[][] table = {
				{0.200,0.100,0.050,0.020,0.010},//表头，显著水平
				
				//n=1~5
				{0.900,0.950,0.975,0.990,0.995},
				{0.684,0.776,0.842,0.900,0.929},
				{0.565,0.636,0.708,0.785,0.829},
				{0.493,0.565,0.624,0.689,0.734},
				{0.447,0.509,0.563,0.627,0.669},
				
				//n=6~10
				{0.410,0.468,0.519,0.577,0.617},
				{0.381,0.436,0.483,0.538,0.576},
				{0.358,0.410,0.454,0.507,0.542},
				{0.339,0.387,0.430,0.480,0.513},
				{0.323,0.369,0.409,0.457,0.489},
				
				//n=11~15
				{0.308,0.352,0.391,0.437,0.468},
				{0.296,0.338,0.375,0.419,0.449},
				{0.285,0.325,0.361,0.404,0.432},
				{0.275,0.314,0.349,0.390,0.418},
				{0.266,0.304,0.338,0.377,0.404},
				
				//n=16~20
				{0.258,0.295,0.327,0.366,0.392},
				{0.250,0.286,0.318,0.355,0.381},
				{0.244,0.279,0.309,0.346,0.371},
				{0.237,0.271,0.310,0.337,0.361},
				{0.232,0.265,0.294,0.329,0.352},
				
				//n=21~25
				{0.226,0.259,0.287,0.321,0.344},
				{0.221,0.253,0.281,0.314,0.337},
				{0.216,0.247,0.275,0.307,0.330},
				{0.212,0.242,0.269,0.301,0.323},
				{0.208,0.238,0.264,0.295,0.317},
				
				//n=26~30
				{0.204,0.233,0.259,0.290,0.311},
				{0.200,0.229,0.254,0.284,0.305},
				{0.197,0.225,0.250,0.279,0.300},
				{0.193,0.221,0.246,0.275,0.295},
				{0.190,0.218,0.242,0.270,0.290},
				
				//n=31~35
				{0.187,0.214,0.238,0.266,0.285},
				{0.184,0.211,0.234,0.262,0.281},
				{0.182,0.208,0.231,0.258,0.277},
				{0.179,0.205,0.227,0.254,0.273},
				{0.177,0.202,0.224,0.251,0.269},
				
				//n=36~40
				{0.174,0.199,0.221,0.247,0.265},
				{0.172,0.196,0.218,0.244,0.262},
				{0.170,0.194,0.215,0.241,0.258},
				{0.168,0.191,0.213,0.238,0.255},
				{0.165,0.189,0.210,0.235,0.252},
				
				//n>40时： value*sqrt(n)
				{1.07,1022,1.36,1.52,1.63},
		};
		
		//根据n 和 alpha 获取表格内的值
		double D = 0;
		int x = 0;
        int y = 0;
        if(n<=40){x = n;}
        else if(n>40){x = 41;}
        
        if(alpha==0.2){y=0;}
        else if(alpha==0.1){y=1;}
        else if(alpha==0.05){y=2;}
        else if(alpha==0.02){y=3;}
        else if(alpha==0.01){y=4;}
        
        if(x<=40){
        	D = table[x][y];
        }else if(x>41){
        	D = table[x][y]*Math.sqrt(n);
        }
        return D;
	}
	public int getN() {
		return n;
	}
	public void setN(int n) {
		this.n = n;
	}
	public double getAlpha() {
		return alpha;
	}
	public void setAlpha(double alpha) {
		this.alpha = alpha;
	}
	public double getD_na() {
		return D_na;
	}
	public void setD_na(double d_na) {
		D_na = d_na;
	}
	
}
